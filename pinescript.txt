# PineScript v5 Golden Rulebook ðŸ“œ

## Foundational Principles

### Code Structure & Naming Conventions
- **Variable Prefixes**: Use type indicators
  - `float_`: Floating-point numbers
  - `int_`: Integers
  - `bool_`: Booleans
  - `string_`: Strings
  - `color_`: Colors

- **Naming Style**:
  - Use camelCase for variables and functions
  - Names must indicate purpose and type

### Type Safety & Performance

#### Function Guidelines
- Limit functions to 3-5 parameters
- Use single-line function declarations
- Always use `=>` on the same line as function declaration
- Return types must be explicitly declared

#### Input Validation
```pinescript
// Validate inputs to prevent errors
bool validateInput(float input) =>
    not na(input) and
    input != float.POSITIVE_INFINITY and
    input != float.NEGATIVE_INFINITY and
    math.abs(input) < 1000000
```

### Optimization Techniques
- Cache expensive calculations
- Use efficient conditionals
- Avoid redundant operations
- Minimize `request.security` calls

## Best Practices

### Conditional Statements
**Correct:**
```pinescript
float value = condition ? trueValue : falseValue
```
**Incorrect:**
```pinescript
// No multi-line conditionals with backslashes or colons
float value = condition ?
    trueValue :
    falseValue
```

### Variable Declaration
- Use `const` for truly constant values
- Use `var` for series values needing persistence

### Plotting & Visualization
- Use color transparency for overlays
- Avoid duplicate plot operations
- Optimize drawing operations

## Error Prevention

### Prevent Common Pitfalls
- Explicit type casting
- Zero tolerance for implicit conversions
- Implement validation guards
- Safe division methods
```pinescript
float safeDivide(float num, float denom, float defaultValue) =>
    denom != 0.0 ? num / denom : defaultValue
```

## Advanced Techniques

### Dynamic Calculations
- Adaptive parameter calculation
- Normalized volatility measurements
- Trend strength detection

## Key Takeaways
1. Always declare types explicitly
2. Prioritize performance and readability
3. Use single-line function and conditional syntax
4. Implement robust input validation
5. Optimize memory and computation usage

**Remember:** Clean, efficient, and predictable code is the ultimate goal! ðŸš€